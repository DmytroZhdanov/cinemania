{"mappings":"oeACAA,EAAA,S,sBCAA,IAAAC,EAAAD,EAAA,SCDAE,EAAAF,EAAA,S,aCAAC,EAAAD,EAAA,a,aAGAG,eAAeC,EAAiBC,GAC9B,GAA0B,QAAtBA,EAAEC,OAAOC,SACX,OAGF,MACMC,EADeH,EAAEC,OACMG,aAAa,MACpCC,QAAiB,EAAAT,EAAAU,gBAAeH,IACtC,EAAAI,EAAAC,uBAAsBH,E,CCVxBT,EAAAD,EAAA,SCDAc,EAAAd,EAAA,SAEA,SAASe,GAA8BC,cACrCA,EAAaC,MACbA,EAAKC,UACLA,EAASC,SACTA,EAAQC,WACRA,EAAUC,YACVA,EAAWC,aACXA,EAAYC,aACZA,EAAYC,WACZA,IAEA,MAAMC,GAAS,EAAAX,EAAAY,qBAAoBR,GAAWS,KAAK,MAEnD,MAAO,kFAE6CX,wHAIAA,uHAIAK,qJAKHA,oBACpCJ,8GAKuBA,8ZASKK,mXAUUC,qIAEMC,2YAWdJ,EAAWQ,QAAQ,4TASnBH,+LAQjCN,kJ,CDhFZ,MAAMU,EAAyBC,SAASC,cAAc,uBAChDC,EAA2BF,SAASC,cACxC,0BAIF5B,iBACE,IACE,MACM8B,SADa,EAAAhC,EAAAiC,2BACQC,QACrBC,EACJH,EAAcI,KAAKC,MAAMD,KAAKE,SAAWN,EAAcO,SAC9BV,SAASC,cAAc,mBAC/BU,UAAY1B,EAA8BqB,E,CAC7D,MAAOM,GAIP,GAHAC,QAAQD,MAAMA,EAAME,SACpBf,EAAuBgB,UAAUC,IAAI,mBACrCd,EAAyBe,aAAa,cAAc,GACK,SAArDC,EAAsBvC,aAAa,cAGrC,YAFAuC,EAAsBC,iBAAiBC,YACrC,8BAGJlB,EAAyBa,UAAUM,OAAO,kB,EAlB9CC,GHJA,MAAMC,EAAmBvB,SAASC,cAAc,6BAC1CuB,EAAsBxB,SAASC,cAAc,2BAC7CiB,EAAwBlB,SAASC,cACrC,6BAGIwB,EAAeC,OAAOC,WAAa,IAAM,EAAI,GAInDtD,iBACE,IACE,MACMuD,SADiB,EAAAzD,EAAA0D,oBACSxB,QAAQyB,MAAM,EAAGL,GAC3CM,EAA8CH,ECXnDI,KACC,EAAC5C,UAAEA,EAAS6C,GAAEA,EAAE1C,YAAEA,EAAWC,aAAEA,EAAYL,MAAEA,EAAKM,aAAEA,MAClD,MAAMyC,EAAO1C,EAAasC,MAAM,EAAG,GAC7BK,EAAa5C,EACf,kCAAkCA,IAClC,+BACE6C,GAAoB,EAAAhE,EAAAiE,2BAA0B5C,GAEpD,MAAO,sJAGc0C,oLAIwBF,gHAEH9C,0DAV3B,EAAAH,EAAAY,qBAAoBR,GAAWS,KAAK,WAWCqC,gGAEFE,iHAIpC,IAGjBvC,KAAK,IDfN0B,EAAiBZ,UAAYoB,EAE7BR,EAAiBe,iBAAiB,SAAS/D,IACzCD,EAAiBC,EAAE,G,CAErB,MAAOqC,GAIP,GAHAC,QAAQD,MAAMA,EAAME,SACpBU,EAAoBT,UAAUC,IAAI,mBAClCE,EAAsBD,aAAa,cAAc,GACW,SAAxDf,EAAyBvB,aAAa,cAIxC,YAHAuB,EAAyBiB,iBAAiBC,YACxC,8BAIJF,EAAsBH,UAAUM,OAAO,kB,EAtB3CkB,G,YDHA,E,WAAAC,iBAEsBxC,SAASyC,iBAAiB,sBAClCC,SAAQC,GAAKA,EAAE5B,UAAUC,IAAI","sources":["src/index.js","src/js/trends.js","src/js/functions/generateMovieCardsMarkup.js","src/js/functions/onMovieCardClick.js","src/js/upcoming.js","src/js/functions/generateUpcomingSectionMarkup.js"],"sourcesContent":["// Index.js\nimport './js/header';\nimport './js/mobile-menu';\nimport './js/hero';\nimport './js/trends';\nimport './js/upcoming';\nimport './js/footer';\nimport './js/modal-trailer';\nimport './js/modal-movie-details';\nimport { setGenresToSS } from './js/functions/setGenresToSS';\n\nsetGenresToSS();\n\nconst headerCurrent = document.querySelectorAll('[data-header-home]');\nheaderCurrent.forEach(i => i.classList.add('js-current'));\n\n","// Weekly trends js\nimport { fetchWeekTrends } from './functions/movieApiService';\nimport { generateMovieCardsMarkup } from './functions/generateMovieCardsMarkup';\nimport { onMovieCardClick } from './functions/onMovieCardClick';\nimport { upcommingTrendsDefaultEl } from './upcoming';\n\nconst weeklyTrendsList = document.querySelector('[data-weekly-trends-list]');\nconst weeklyTrendsCardsEl = document.querySelector('.js-weekly-trends-cards');\nconst weeklyTrendsDefaultEl = document.querySelector(\n  '.js-weekly-trends-default'\n);\n\nconst moviesNumber = window.innerWidth < 768 ? 1 : 3;\n\nrenderWeeklyTrendsItems();\n\nasync function renderWeeklyTrendsItems() {\n  try {\n    const response = await fetchWeekTrends();\n    const moviesToRender = response.results.slice(0, moviesNumber);\n    const weeklyTrendsMarkup = generateMovieCardsMarkup(moviesToRender);\n    weeklyTrendsList.innerHTML = weeklyTrendsMarkup;\n\n    weeklyTrendsList.addEventListener('click', e => {\n      onMovieCardClick(e);\n    });\n  } catch (error) {\n    console.error(error.message);\n    weeklyTrendsCardsEl.classList.add('visually-hidden');\n    weeklyTrendsDefaultEl.setAttribute('data-shown', true);\n    if (upcommingTrendsDefaultEl.getAttribute('data-shown') === 'true') {\n      upcommingTrendsDefaultEl.lastElementChild.textContent =\n        'We don’t have any results.';\n\n      return;\n    }\n    weeklyTrendsDefaultEl.classList.remove('visually-hidden');\n  }\n}\n\nexport { weeklyTrendsDefaultEl };\n","import { generateRatingStarsMarkup } from './generateRatingStarsMarkup';\nimport { getGenresByGenresId } from './getGenresByGenresId';\n/**\n *\n * @param {Array} arr\n * @returns {String} markup for movie cards. You should insert resul inside <ul> by innerHTML\n */\nfunction generateMovieCardsMarkup(arr) {\n  const markup = arr\n    .map(\n      ({ genre_ids, id, poster_path, release_date, title, vote_average }) => {\n        const year = release_date.slice(0, 4);\n        const posterPath = poster_path\n          ? `https://image.tmdb.org/t/p/w500${poster_path}`\n          : './images/image-not-found.jpg';\n        const ratingStarsMurkup = generateRatingStarsMarkup(vote_average);\n        const genres = getGenresByGenresId(genre_ids).join(', ');\n        return `<li class=\"cards-item\">\n                  <button type=\"button\" class=\"btn cards-item-btn\">\n                    <img\n                      src=\"${posterPath}\"\n                      alt=\"Poster of the movie\"\n                      class=\"movie-card-poster\"\n                    />\n                    <div class=\"cards-content\" id=\"${id}\">\n                      <div class=\"cards-text-content\">\n                        <h3 class=\"cards-title\">${title}</h3>\n                        <p class=\"cards-text\">${genres} | ${year}</p>\n                      </div>\n                      <div class=\"rating-stars-wrapper\">${ratingStarsMurkup}\n                      </div>\n                    </div>\n                  </button>\n                </li>`;\n      }\n    )\n    .join('');\n\n  return markup;\n}\n\nexport { generateMovieCardsMarkup };\n","import { fetchMovieById } from './movieApiService';\nimport { openModalMovieDetails } from './openModalMovieDetails';\n\nasync function onMovieCardClick(e) {\n  if (e.target.nodeName !== 'DIV') {\n    return;\n  }\n\n  const movieCardBtn = e.target;\n  const movieId = movieCardBtn.getAttribute('id');\n  const response = await fetchMovieById(movieId);\n  openModalMovieDetails(response);\n}\n\nexport { onMovieCardClick };\n","// Upcoming this month js\nimport { fetchUpcomingThisMonth } from './functions/movieApiService';\nimport { generateUpcomingSectionMarkup } from './functions/generateUpcomingSectionMarkup';\nimport { weeklyTrendsDefaultEl } from './trends';\n\nconst upcommingTrendsCardsEl = document.querySelector('.js-upcomming-cards');\nconst upcommingTrendsDefaultEl = document.querySelector(\n  '.js-upcomming-default'\n);\n\ngettingMovie();\nasync function gettingMovie() {\n  try {\n    const data = await fetchUpcomingThisMonth();\n    const uncomingArray = data.results;\n    const randomMovie =\n      uncomingArray[Math.floor(Math.random() * uncomingArray.length)];\n    const upcomingConatainer = document.querySelector('[data-upcoming]');\n    upcomingConatainer.innerHTML = generateUpcomingSectionMarkup(randomMovie);\n  } catch (error) {\n    console.error(error.message);\n    upcommingTrendsCardsEl.classList.add('visually-hidden');\n    upcommingTrendsDefaultEl.setAttribute('data-shown', true);\n    if (weeklyTrendsDefaultEl.getAttribute('data-shown') === 'true') {\n      weeklyTrendsDefaultEl.lastElementChild.textContent =\n        'We don’t have any results.';\n      return;\n    }\n    upcommingTrendsDefaultEl.classList.remove('visually-hidden');\n  }\n}\n\nexport { upcommingTrendsDefaultEl };\n","import { getGenresByGenresId } from './getGenresByGenresId';\n\nfunction generateUpcomingSectionMarkup({\n  backdrop_path,\n  title,\n  genre_ids,\n  overview,\n  popularity,\n  poster_path,\n  release_date,\n  vote_average,\n  vote_count,\n}) {\n  const genres = getGenresByGenresId(genre_ids).join(', ');\n\n  return ` <picture>\n      <source\n        srcset=\"https://image.tmdb.org/t/p/original/${backdrop_path}\"\n        media=\"(min-width:1280px)\"\n      />\n      <source\n        srcset=\"https://image.tmdb.org/t/p/original/${backdrop_path}\"\n        media=\"(min-width:768px)\"\n      />\n      <source\n        srcset=\"https://image.tmdb.org/t/p/original/${poster_path}\"\n        media=\"(min-width:320px)\"\n      />\n      <img\n        class=\"upcoming-movie-img\"\n        src=\"https://image.tmdb.org/t/p/original/${poster_path}\"\n        alt=\"${title}\"\n      />\n    </picture>\n    \n    <div class=\"upcoming-column\">\n      <h2 class=\"upcoming-headline\">${title}</h2>\n      <div class=\"upcoming-wrap\">\n        <div class=\"upcoming-inner-wrap\">\n          <div class=\"upcoming-wrapper upcoming-wrapper-gap\">\n            <ul class=\"upcoming-list\">\n              <li class=\"upcoming-item-data\">\n                <p class=\"upcoming-subject\">Release date</p>\n              </li>\n              <li class=\"upcoming-item-data-num\">\n                <p class=\"upcoming-date\">${release_date}</p>\n              </li>\n            </ul>\n    \n            <ul class=\"upcoming-list\">\n              <li class=\"upcoming-item-vote\">\n                <p class=\"upcoming-subject\">Vote / Votes</p>\n              </li>\n              <li class=\"upcoming-item-vote-num\">\n                <p class=\"upcoming-vote\">\n                  <span class=\"upcoming-inner-box\">${vote_average}</span>\n                  <span class=\"upcoming-inner-color\">/</span>\n                  <span class=\"upcoming-inner-box-votes\">${vote_count}</span>\n                </p>\n              </li>\n            </ul>\n          </div>\n          <div class=\"upcoming-wrapper\">\n            <ul class=\"upcoming-list\">\n              <li class=\"upcoming-item-pop\">\n                <p class=\"upcoming-subject\">Popularity</p>\n              </li>\n              <li class=\"upcoming-item-pop-num\">\n                <p class=\"upcoming-famous\">${popularity.toFixed(1)}</p>\n              </li>\n            </ul>\n    \n            <ul class=\"upcoming-list\">\n              <li class=\"upcoming-item-genre\">\n                <p class=\"upcoming-subject\">Genre</p>\n              </li>\n              <li class=\"upcoming-item-genre-num\">\n                <p class=\"upcoming-janres\">${genres}</p>\n              </li>\n            </ul>\n          </div>\n        </div>\n    \n        <h3 class=\"upcoming-caption\">About</h3>\n        <p class=\"upcoming-description\">\n          ${overview}\n        </p>\n        <button class=\"btn btn-filled\" type=\"button\">\n          Add to my library\n        </button>\n      </div>\n    </div>`;\n}\n\nexport { generateUpcomingSectionMarkup };\n"],"names":["parcelRequire","$ffJBb","$aNFDY","async","$812d1721f4b6d014$export$2d08c7f0d0e4b2d5","e","target","nodeName","movieId","getAttribute","response","fetchMovieById","$kICWm","openModalMovieDetails","$2ZOXv","$b6c3995dc8b8a0c5$export$38eb1fd69e84b0a","backdrop_path","title","genre_ids","overview","popularity","poster_path","release_date","vote_average","vote_count","genres","getGenresByGenresId","join","toFixed","$65414923e0a79c46$var$upcommingTrendsCardsEl","document","querySelector","$65414923e0a79c46$export$e620f2a78150699b","uncomingArray","fetchUpcomingThisMonth","results","randomMovie","Math","floor","random","length","innerHTML","error","console","message","classList","add","setAttribute","$69f116c65cf4dd06$export$905688e3e0e36afe","lastElementChild","textContent","remove","$65414923e0a79c46$var$gettingMovie","$69f116c65cf4dd06$var$weeklyTrendsList","$69f116c65cf4dd06$var$weeklyTrendsCardsEl","$69f116c65cf4dd06$var$moviesNumber","window","innerWidth","moviesToRender","fetchWeekTrends","slice","weeklyTrendsMarkup","map","id","year","posterPath","ratingStarsMurkup","generateRatingStarsMarkup","addEventListener","$69f116c65cf4dd06$var$renderWeeklyTrendsItems","setGenresToSS","querySelectorAll","forEach","i"],"version":3,"file":"index.0a03c1d2.js.map"}
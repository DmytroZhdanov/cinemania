{"mappings":"oeACAA,EAAA,S,sBCAA,IAAAC,EAAAD,EAAA,SCDAE,EAAAF,EAAA,SDIA,MAAMG,EAAmBC,SAASC,cAAc,6BAE1CC,EAAeC,OAAOC,WAAa,IAAM,EAAI,GAInDC,iBACE,MAAMC,QAAiB,EAAAT,EAAAU,mBAEjBC,GCP0BC,EDMTH,EAASI,QAAQC,MAAM,EAAGT,GCL1CO,EAAIG,KACT,EAACC,UAAEA,EAASC,GAAEA,EAAEC,YAAEA,EAAWC,aAAEA,EAAYC,MAAEA,EAAKC,aAAEA,MAClD,MAAMC,EAAOH,EAAaL,MAAM,EAAG,GAC7BS,EAAaL,EACf,kCAAkCA,IAClC,+BACEM,GAAoB,EAAAvB,EAAAwB,2BAA0BJ,GAIpD,MAAO,8CAA8CJ,iCAE5CM,sMAMqBH,2CAVfJ,EAAUU,KAAK,UAWUJ,oEAEFE,4CAGlC,IAENE,KAAK,KA3BT,IAAkCd,EDQhCV,EAAiByB,UAAYhB,C,CAN/BiB,G,WERA5B,EAAAD,EAAA,SHUA,MAAM8B,EAAgB1B,SAASC,cAAc,sBACvC0B,EAAmB3B,SAASC,cAAc,2BAC1C2B,EAAmB5B,SAASC,cAAc,yBAChDyB,EAAcG,UAAUC,IAAI,cAC5BF,EAAiBC,UAAUE,OAAO,cAClCJ,EAAiBE,UAAUE,OAAO,cAIlC,MAAMC,EGbN3B,eAAmC4B,GACjC,MAAM3B,QAAiB,EAAAT,EAAAqC,mBAQvB,OANeD,EAAarB,KAAIE,GACRR,EAAS6B,OAAOC,MAAKC,GAAUA,EAAOvB,KAAOA,IAE9CwB,M,CHOV,CAAoB,CAAC,GAAI,GAAI,KAC5CC,QAAQC,IAAIR","sources":["src/index.js","src/js/trends.js","src/js/functions/generateMovieCardsMarkup.js","src/js/functions/getGenresByGenresId.js"],"sourcesContent":["// Index.js\nimport './js/header';\nimport './js/mobile-menu';\nimport './js/hero';\nimport './js/trends';\nimport './js/upcoming';\nimport './js/footer';\nimport './js/modal-trailer';\nimport './js/modal-movie-details';\n\nconst headerCurrent = document.querySelector('[data-header-home]');\nconst headerCatCurrent = document.querySelector('[data-header-catalogue]');\nconst headerLibCurrent = document.querySelector('[data-header-library]');\nheaderCurrent.classList.add('js-current');\nheaderLibCurrent.classList.remove('js-current');\nheaderCatCurrent.classList.remove('js-current');\n\nimport { getGenresByGenresId } from './js/functions/getGenresByGenresId';\n\nconst genres = getGenresByGenresId([28, 12, 16]);\nconsole.log(genres);","// Weekly trends js\nimport { fetchWeekTrends } from './functions/movieApiService';\nimport { generateMovieCardsMarkup } from './functions/generateMovieCardsMarkup';\n\nconst weeklyTrendsList = document.querySelector('[data-weekly-trends-list]');\n\nconst moviesNumber = window.innerWidth < 768 ? 1 : 3;\n\nrenderWeeklyTrendsItems();\n\nasync function renderWeeklyTrendsItems() {\n  const response = await fetchWeekTrends();\n  const moviesToRender = response.results.slice(0, moviesNumber);\n  const weeklyTrendsMarkup = generateMovieCardsMarkup(moviesToRender);\n  weeklyTrendsList.innerHTML = weeklyTrendsMarkup;\n}\n","import { generateRatingStarsMarkup } from './generateRatingStarsMarkup';\n/**\n * \n * @param {Array} arr \n * @returns {String} markup for movie cards. You should insert resul inside <ul> by innerHTML\n */\nfunction generateMovieCardsMarkup(arr) {\n  return arr.map(\n    ({ genre_ids, id, poster_path, release_date, title, vote_average }) => {\n      const year = release_date.slice(0, 4);\n      const posterPath = poster_path\n        ? `https://image.tmdb.org/t/p/w500${poster_path}`\n        : './images/image-not-found.jpg';\n      const ratingStarsMurkup = generateRatingStarsMarkup(vote_average); \n      // Temporarily\n      const genres = genre_ids.join(' ');\n      // Temporarily\n      return `<li class=\"cards-item\" data-movie-card-id=\"${id}\">\n      <img\n        src=\"${posterPath}\"\n        alt=\"Poster of the movie\"\n        class=\"movie-card-poster\"\n      />\n      <div class=\"cards-content\">\n        <div class=\"cards-text-content\">\n          <h3 class=\"cards-title\">${title}</h3>\n          <p class=\"cards-text\">${genres} | ${year}</p>\n        </div>\n        <div class=\"rating-stars-wrapper\">${ratingStarsMurkup}\n        </div>\n      </div>\n    </li>`;\n    }\n  ).join('');\n}\n\nexport { generateMovieCardsMarkup };\n","import { fetchGenresList } from './movieApiService';\n/**\n * \n * @param {Array} genresIdsArr Array of genres_ids\n * @returns {Promise} Promise with array of genres (strings) as a result\n */\nasync function getGenresByGenresId(genresIdsArr) {\n  const response = await fetchGenresList();\n\n  const genres = genresIdsArr.map(id => {\n    const genresObjects = response.genres.find(object => object.id === id);\n\n    return genresObjects.name;\n  });\n\n  return genres;\n}\n\nexport { getGenresByGenresId };\n"],"names":["parcelRequire","$ffJBb","$aNFDY","$69f116c65cf4dd06$var$weeklyTrendsList","document","querySelector","$69f116c65cf4dd06$var$moviesNumber","window","innerWidth","async","response","fetchWeekTrends","weeklyTrendsMarkup","arr","results","slice","map","genre_ids","id","poster_path","release_date","title","vote_average","year","posterPath","ratingStarsMurkup","generateRatingStarsMarkup","join","innerHTML","$69f116c65cf4dd06$var$renderWeeklyTrendsItems","$1f0dc3b9307be026$var$headerCurrent","$1f0dc3b9307be026$var$headerCatCurrent","$1f0dc3b9307be026$var$headerLibCurrent","classList","add","remove","$1f0dc3b9307be026$var$genres","genresIdsArr","fetchGenresList","genres","find","object","name","console","log"],"version":3,"file":"index.b9f7c49e.js.map"}
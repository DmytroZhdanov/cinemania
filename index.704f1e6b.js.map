{"mappings":"oeACAA,EAAA,S,sBCAA,IAAAC,EAAAD,EAAA,SCDAE,EAAAF,EAAA,SCKA,SAASG,EAAoBC,GAC3B,MAAMC,EAAYC,KAAKC,MAAMC,eAAeC,QAAQ,WAQpD,OANeL,EAAaM,KAAIC,GACRN,EAAUO,OAAOC,MAAKC,GAAUA,EAAOH,KAAOA,IAE/CI,M,CFPzB,MAAMC,EAAmBC,SAASC,cAAc,6BAE1CC,EAAeC,OAAOC,WAAa,IAAM,EAAI,GAInDC,iBACE,MAAMC,QAAiB,EAAAtB,EAAAuB,mBAEjBC,GCN0BC,EDKTH,EAASI,QAAQC,MAAM,EAAGT,GCJlCO,EACZhB,KACC,EAACmB,UAAEA,EAASlB,GAAEA,EAAEmB,YAAEA,EAAWC,aAAEA,EAAYC,MAAEA,EAAKC,aAAEA,MAClD,MAAMC,EAAOH,EAAaH,MAAM,EAAG,GAC7BO,EAAaL,EACf,kCAAkCA,IAClC,+BACEM,GAAoB,EAAAlC,EAAAmC,2BAA0BJ,GAEpD,MAAO,8CAA8CtB,iCAE9CwB,sMAMqBH,2CATb7B,EAAoB0B,GAAWS,KAAK,WAUbJ,oEAEFE,4CAGlC,IAGLE,KAAK,KA3BV,IAAkCZ,EDOhCV,EAAiBuB,UAAYd,C,CAN/Be,G,YDGA,E,WAAAC,iBAEA,MAAMC,EAAgBzB,SAASC,cAAc,sBACvCyB,EAAmB1B,SAASC,cAAc,2BAC1C0B,EAAmB3B,SAASC,cAAc,yBAChDwB,EAAcG,UAAUC,IAAI,cAC5BF,EAAiBC,UAAUE,OAAO,cAClCJ,EAAiBE,UAAUE,OAAO","sources":["src/index.js","src/js/trends.js","src/js/functions/generateMovieCardsMarkup.js","src/js/functions/getGenresByGenresId.js"],"sourcesContent":["// Index.js\nimport './js/header';\nimport './js/mobile-menu';\nimport './js/hero';\nimport './js/trends';\nimport './js/upcoming';\nimport './js/footer';\nimport './js/modal-trailer';\nimport './js/modal-movie-details';\nimport { setGenresToSS } from './js/functions/setGenresToSS'\n\nsetGenresToSS()\n\nconst headerCurrent = document.querySelector('[data-header-home]');\nconst headerCatCurrent = document.querySelector('[data-header-catalogue]');\nconst headerLibCurrent = document.querySelector('[data-header-library]');\nheaderCurrent.classList.add('js-current');\nheaderLibCurrent.classList.remove('js-current');\nheaderCatCurrent.classList.remove('js-current');\n\n// import { getGenresByGenresId } from './js/functions/getGenresByGenresId';\n\n// const genres = getGenresByGenresId([28, 12, 16]);\n// console.log(genres);","// Weekly trends js\nimport { fetchWeekTrends } from './functions/movieApiService';\nimport { generateMovieCardsMarkup } from './functions/generateMovieCardsMarkup';\n\nconst weeklyTrendsList = document.querySelector('[data-weekly-trends-list]');\n\nconst moviesNumber = window.innerWidth < 768 ? 1 : 3;\n\nrenderWeeklyTrendsItems();\n\nasync function renderWeeklyTrendsItems() {\n  const response = await fetchWeekTrends();\n  const moviesToRender = response.results.slice(0, moviesNumber);\n  const weeklyTrendsMarkup = generateMovieCardsMarkup(moviesToRender);\n  weeklyTrendsList.innerHTML = weeklyTrendsMarkup;\n}\n","import { generateRatingStarsMarkup } from './generateRatingStarsMarkup';\nimport { getGenresByGenresId } from './getGenresByGenresId';\n/**\n *\n * @param {Array} arr\n * @returns {String} markup for movie cards. You should insert resul inside <ul> by innerHTML\n */\nfunction generateMovieCardsMarkup(arr) {\n  const markup = arr\n    .map(\n      ({ genre_ids, id, poster_path, release_date, title, vote_average }) => {\n        const year = release_date.slice(0, 4);\n        const posterPath = poster_path\n          ? `https://image.tmdb.org/t/p/w500${poster_path}`\n          : './images/image-not-found.jpg';\n        const ratingStarsMurkup = generateRatingStarsMarkup(vote_average);\n        const genres = getGenresByGenresId(genre_ids).join(', ');\n        return `<li class=\"cards-item\" data-movie-card-id=\"${id}\">\n      <img\n        src=\"${posterPath}\"\n        alt=\"Poster of the movie\"\n        class=\"movie-card-poster\"\n      />\n      <div class=\"cards-content\">\n        <div class=\"cards-text-content\">\n          <h3 class=\"cards-title\">${title}</h3>\n          <p class=\"cards-text\">${genres} | ${year}</p>\n        </div>\n        <div class=\"rating-stars-wrapper\">${ratingStarsMurkup}\n        </div>\n      </div>\n    </li>`;\n      }\n    )\n    .join('');\n\n  return markup;\n}\n\nexport { generateMovieCardsMarkup };\n","/**\n *\n * @param {Array} genresIdsArr Array of genres_ids\n * @returns {Array} Array of genres (strings) as a result\n */\nfunction getGenresByGenresId(genresIdsArr) {\n  const allGenres = JSON.parse(sessionStorage.getItem('genres'));\n\n  const genres = genresIdsArr.map(id => {\n    const genresObjects = allGenres.genres.find(object => object.id === id);\n\n    return genresObjects.name;\n  });\n\n  return genres;\n}\n\nexport { getGenresByGenresId };\n"],"names":["parcelRequire","$ffJBb","$aNFDY","$22e8cea54550bc67$export$d01ede1d0fdc2a9b","genresIdsArr","allGenres","JSON","parse","sessionStorage","getItem","map","id","genres","find","object","name","$69f116c65cf4dd06$var$weeklyTrendsList","document","querySelector","$69f116c65cf4dd06$var$moviesNumber","window","innerWidth","async","response","fetchWeekTrends","weeklyTrendsMarkup","arr","results","slice","genre_ids","poster_path","release_date","title","vote_average","year","posterPath","ratingStarsMurkup","generateRatingStarsMarkup","join","innerHTML","$69f116c65cf4dd06$var$renderWeeklyTrendsItems","setGenresToSS","$1f0dc3b9307be026$var$headerCurrent","$1f0dc3b9307be026$var$headerCatCurrent","$1f0dc3b9307be026$var$headerLibCurrent","classList","add","remove"],"version":3,"file":"index.704f1e6b.js.map"}